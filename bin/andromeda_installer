#!/bin/bash

#set -e

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# ======================================= ASCII =============================================== #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

NIX=$(
    cat <<'EOF'
 _   _ _____  __  ___ _   _ ____ _____  _    _     _     _____ ____
| \ | |_ _\ \/ / |_ _| \ | / ___|_   _|/ \  | |   | |   | ____|  _ \
|  \| || | \  /   | ||  \| \___ \ | | / _ \ | |   | |   |  _| | |_) |
| |\  || | /  \   | || |\  |___) || |/ ___ \| |___| |___| |___|  _ <
|_| \_|___/_/\_\ |___|_| \_|____/ |_/_/   \_\_____|_____|_____|_| \_\
EOF
)

ANSIBLE=$(
    cat <<'EOF'
    _    _   _ ____ ___ ____  _     _____   ___ _   _ ____ _____  _    _     _     _____ ____
   / \  | \ | / ___|_ _| __ )| |   | ____| |_ _| \ | / ___|_   _|/ \  | |   | |   | ____|  _ \
  / _ \ |  \| \___ \| ||  _ \| |   |  _|    | ||  \| \___ \ | | / _ \ | |   | |   |  _| | |_) |
 / ___ \| |\  |___) | || |_) | |___| |___   | || |\  |___) || |/ ___ \| |___| |___| |___|  _ <
/_/   \_\_| \_|____/___|____/|_____|_____| |___|_| \_|____/ |_/_/   \_\_____|_____|_____|_| \_\
EOF
)

GALAXY=$(
    cat <<'EOF'
    _    _   _ ____ ___ ____  _     _____    ____    _    _        _    __  ____   __
   / \  | \ | / ___|_ _| __ )| |   | ____|  / ___|  / \  | |      / \   \ \/ /\ \ / /
  / _ \ |  \| \___ \| ||  _ \| |   |  _|   | |  _  / _ \ | |     / _ \   \  /  \ V /
 / ___ \| |\  |___) | || |_) | |___| |___  | |_| |/ ___ \| |___ / ___ \  /  \   | |
/_/   \_\_| \_|____/___|____/|_____|_____|  \____/_/   \_\_____/_/   \_\/_/\_\  |_|
EOF
)

ANSIBLEPLAYBOOK=$(
    cat <<'EOF'
    _    _   _ ____ ___ ____  _     _____   ____  _        _ __   ______   ___   ___  _  __
   / \  | \ | / ___|_ _| __ )| |   | ____| |  _ \| |      / \\ \ / / __ ) / _ \ / _ \| |/ /
  / _ \ |  \| \___ \| ||  _ \| |   |  _|   | |_) | |     / _ \\ V /|  _ \| | | | | | | ' /
 / ___ \| |\  |___) | || |_) | |___| |___  |  __/| |___ / ___ \| | | |_) | |_| | |_| | . \
/_/   \_\_| \_|____/___|____/|_____|_____| |_|   |_____/_/   \_\_| |____/ \___/ \___/|_|\_\
EOF
)

# shellcheck disable=SC1091
source /etc/os-release
export PATH="$PATH:~/.local/bin"

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# ======================================= VARS =============================================== #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

RESET="\033[0m"
BOLD="\033[1m"
BLUE="\033[38;5;12m"
YELLOW="\033[38;5;11m"

PKG_MANAGER=
INSTALL_CMD=

AVAILABLE_TAGS=("all")
AVAILABLE_PLAYBOOKS=("local")

TAGS="all"
PLAYBOOK="local"
DOTFILE_HOME="$HOME/.dotfiles"
GITHUB_URL="https://github.com/lecoqjacob/dotsv2"

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# ======================================= INPUT =============================================== #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

function usage() {
    echo "Usage: $0 [options] [command]"
    echo
    echo "Commands:"
    echo "  install  Install andromeda"
    echo
    echo "Options:"
    echo "  -h  Display this help message"
    echo "  -t  Tags to run"
    echo "  -s  Skip confirmation"
}

# Get the options
while [[ "$#" -gt 0 ]]; do
    case $1 in
    install) INSTALL="true" ;;
    -t | --tags) TAGS="true" ;;
    -s | --skip) SKIP_INSTALL="true" ;;
    esac
    shift
done

if [ -z "$INSTALL" ]; then
    usage
    exit 0
fi

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# ================================== Gather OS / Package Manager Info ========================= #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

declare -A OSINFO
OSINFO["/etc/SuSE-release"]=zypp
OSINFO["/etc/fedora-release"]=dnf
OSINFO["/etc/alpine-release"]=apk
OSINFO["/etc/arch-release"]=pacman
OSINFO["/etc/gentoo-release"]=emerge
OSINFO["/etc/debian_version"]=apt-get

declare -A INSTALLCMD
INSTALLCMD["brew"]="brew install -y"
INSTALLCMD["emerge"]="sudo emerge -a"
INSTALLCMD["dnf"]="sudo dnf install -y"
INSTALLCMD["yum"]="sudo yum install -y"
INSTALLCMD[""]="sudo zypper install -y"
INSTALLCMD["apk"]="sudo apk add --no-cache"
INSTALLCMD["apt-get"]="sudo apt-get install -y"
INSTALLCMD[pacman]="sudo pacman -S --noconfirm"

# Assign package manager and install command
for f in "${!OSINFO[@]}"; do
    if [[ -f $f ]]; then
        PKG_MANAGER=${OSINFO[$f]}
        break
    fi
done

INSTALL_CMD=${INSTALLCMD[$PKG_MANAGER]}

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# ======================================= BASH HELPERS ===========================================#
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

function repeat() {
    for _ in $(seq 1 "$2"); do echo -n "$1"; done
}

function dir_exist() {
    if [ -d "$1" ]; then
        return 0
    else
        return 1
    fi
}

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# ======================================= HELPERS =============================================== #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

function gecho() {
    echo -e "$BOLD""$YELLOW""ANDROMEDA""$RESET" "$1"
}

function double_gecho {
    gecho "$1"
    echo
}

function section_start() {
    echo "$1"
    line c="$2"
}

# shellcheck disable=SC2120
function section_end() {
    echo "$1"
    sleep 0.5
}

function title() {
    echo
    line c="$2"
    echo "$1"
    line c="$2"
}

function line() {
    local "${@}"

    char=${ch:-"="}
    count=${c:-100}
    double_echo=${d:-"false"}
    repeat "$char" "$count"
    echo

    if [ "$double_echo" == "true" ]; then
        echo
    fi
}

function confirm() {
    msg=${1:-"Do you wish to continue? (Y/n)"}
    read -r -p "$(gecho "$msg ")" choice
    case $choice in
    y | Y | "") return 0 ;;
    n | N) return 1 ;;
    *) return 1 ;;
    esac
}

function ensure_repo() {
    gecho "Ensuring dotfiles repo is cloned..."

    if [ ! -d "$DOTFILE_HOME" ]; then
        gecho "Cloning dotfiles into $DOTFILE_HOME...\n"
        git clone $GITHUB_URL "$DOTFILE_HOME" --depth 1
    fi
}

function run_playbook() {
    ansible-playbook -i "$DOTFILE_HOME"/inventory/hosts "$DOTFILE_HOME"/bootstrap.yml --tags "$TAGS" --ask-vault-password
}

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #
# ======================================= PACKAGES =============================================== #
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> #

function check_requirment() {
    if ! command -v "$1" &>/dev/null; then
        return 1
    else
        return 0
    fi
}

function check_requirments() {
    pkgs=("$@")
    for pkg in "${pkgs[@]}"; do
        if ! check_requirment "$pkg"; then
            return 1
        fi
    done
}

# $1 = package name
# "$2" = install command
function install_pkg() {
    if check_requirment "$1"; then
        gecho "[ $1 ] is already installed."
        return 0
    fi

    pkg_to_install=${2:-$1}
    gecho "[ $1 ] is not installed. Installing..."
    $INSTALL_CMD "$pkg_to_install" >/dev/null 2>&1
    if ! $INSTALL_CMD "$pkg_to_install" >/dev/null 2>&1; then
        gecho "Failed to install [ $1 ]"
        return 1
    fi

    sleep 0.3
}

function install_pkgs() {
    for pkg in "${pkgs[@]}"; do
        install_pkg "$pkg"
    done
}

function install_pkg_silent() {
    install_pkg "$1" >/dev/null 2>&1
}

function install_pkgs_silent() {
    for pkg in "${pkgs[@]}"; do
        install_pkg_silent "$pkg"
    done
}

# =============================================================================================== #
# ======================================= INSATALLER ============================================ #
# =============================================================================================== #

# Clear this bitch

clear
line
cat <<'EOF'
    _              _                              _         ___           _        _ _
   / \   _ __   __| |_ __ ___  _ __ ___   ___  __| | __ _  |_ _|_ __  ___| |_ __ _| | | ___ _ __
  / _ \ | '_ \ / _` | '__/ _ \| '_ ` _ \ / _ \/ _` |/ _` |  | || '_ \/ __| __/ _` | | |/ _ \ '__|
 / ___ \| | | | (_| | | | (_) | | | | | |  __/ (_| | (_| |  | || | | \__ \ || (_| | | |  __/ |
/_/   \_\_| |_|\__,_|_|  \___/|_| |_| |_|\___|\__,_|\__,_| |___|_| |_|___/\__\__,_|_|_|\___|_|
EOF
line

gecho "Welcome to the Andromeda Installer! Running pre-ansible configurations and installations."

# clone dots
ensure_repo

############################
## Nix Installer
############################
section_start "$NIX"
if ! dir_exist "/nix"; then
    double_gecho "[ nix ] is not installed. Downloading and installing..."
    curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install --no-confirm
else
    gecho "[ nix ] is already installed."
fi

# Check if nix.conf is configured
if ! dir_exist "$HOME/.config/nix"; then
    gecho "Directory doesn't exist. Creating and Configuring nix.conf with experimental features enabled..."

    mkdir -p ~/.config/nix
    echo "experimental-features = nix-command flakes" >"$HOME/.config/nix/nix.conf"
else
    if ! grep -q "experimental-features =" "$HOME/.config/nix/nix.conf"; then
        gecho "Configuring nix.conf with experimental features enabled..."
        echo "experimental-features = nix-command" >>"$HOME/.config/nix/nix.conf"
    else
        gecho "nix.conf is already configured."
    fi
fi
section_end

############################
## Dependencies
############################
# nix-shell -p gum fastfetch
nix profile install nixpkgs#gum nixpkgs#fastfetch

############################
## Main Section
############################

fastfetch
line

# Skip installer if -s flag is passed
if [ -n "$SKIP_INSTALL" ]; then
    run_playbook
    exit 0
fi

# If ansible is already installed, ask if they just want to run the playbook
if check_requirment ansible; then
    if confirm "Ansible is already installed. Run playbook [ $BLUE$PLAYBOOK$RESET ] with tags [ $BLUE$TAGS$RESET ]? (Y/n)"; then
        run_playbook
        exit 0
    fi
fi

cat <<'EOF'
This script performs the following actions:
-> Installs required packages [gum fastfetch nix ansible]
-> Installs ansible-galaxy and ansible-galaxy packages
-> Runs ansible playbook
EOF
line

if ! confirm "Run installer? (Y/n)"; then
    exit 0
fi

############################
## Ansible Installer
############################
section_start "$ANSIBLE"
install_pkg "ansible" "ansible-core"
install_pkg "ansible-lint"
section_end

############################
## Ansible Galaxy
############################
section_start "$GALAXY"
gecho "Installing ansible-galaxy requirements..."
ansible-galaxy collection install -Uir "$DOTFILE_HOME/requirements.yml"
section_end

############################
## Ansible Playbook
############################
section_start "$ANSIBLEPLAYBOOK"
header="Select a playbook to run"
PLAYBOOK=$(gum choose --item.foreground 250 --header="$header" "${AVAILABLE_PLAYBOOKS[@]}")
gecho "$header: $BLUE$PLAYBOOK$RESET"

header="Select a tag to run"
TAGS=$(gum choose --item.foreground 250 --header="$header" "${AVAILABLE_TAGS[@]}")
gecho "$header: $BLUE$TAGS$RESET"

# LIFT OFF
run_playbook
