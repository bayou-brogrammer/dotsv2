#!/bin/sh

set -e
source /etc/os-release
export PATH="$PATH:~/.local/bin"

# >>>>>>>>>>>>>>>>>>>>>>>>>>
# INPUT
# >>>>>>>>>>>>>>>>>>>>>>>>>>

tags="$1"
if [ -z $tags ]; then
  tags="all"
fi

# >>>>>>>>>>>>>>>>>>>>>>>>>>
# Vars
# >>>>>>>>>>>>>>>>>>>>>>>>>>

PKG_MANAGER=
INSTALL_CMD=
RUN_INSTALLER=

to_install=()
TAGS=("all")
PLAYBOOKS=("local")

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# Gather OS / Package Manager Info
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

declare -A OSINFO;
OSINFO[/etc/SuSE-release]=zypp
OSINFO[/etc/redhat-release]=yum
OSINFO[/etc/alpine-release]=apk
OSINFO[/etc/arch-release]=pacman
OSINFO[/etc/gentoo-release]=emerge
OSINFO[/etc/debian_version]=apt-get

declare -A PKGMANAGER;
PKGMANAGER[yum]=yum
PKGMANAGER[apk]=apk
PKGMANAGER[brew]=brew
PKGMANAGER[zypp]=zypp
PKGMANAGER[pacman]=pacman
PKGMANAGER[emerge]=emerge
PKGMANAGER[apt-get]=apt-get

declare -A INSTALLCMD;
INSTALLCMD[apk]="sudo apk add"
INSTALLCMD[brew]="brew install"
INSTALLCMD[emerge]="sudo emerge"
INSTALLCMD[yum]="sudo yum install"
INSTALLCMD[pacman]="sudo pacman -S"
INSTALLCMD[zypp]="sudo zypper install"
INSTALLCMD[apt-get]="sudo apt-get install"

# Assign package manager and install command
for f in ${!OSINFO[@]}
do
    if [[ -f $f ]];then
        PKG_MANAGER=${PKGMANAGER[${OSINFO[$f]}]}
        break
    fi
done

INSTALL_CMD=${INSTALLCMD[$PKG_MANAGER]}

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# >>>>>>>>>>>>>>>>>>>>>>>>>>
# Script Helpers
# >>>>>>>>>>>>>>>>>>>>>>>>>>

function tabecho {
    echo ">>> $1"
}

function title(){
    figlet "$1" -f small
    line true
}

function quit() {
    echo "Exiting..."
    exit 0
}

function line(){
    with_double_echo=${1:-"false"}
    nums=${2:-"65"}
    printf '=%.0s' $(seq 1 $nums)
    echo
    if [ $with_double_echo == "true" ]; then
        echo
    fi
}

function confirm() {
    msg=${1:-"Do you wish to continue? (Y/n)"}
    with_echo=${2:-"true"}

    if which gum &> /dev/null
    then
        gum confirm "$msg" --default=true --affirmative "Yes" --negative "No"
        if [ $with_echo == "true" ]; then
            echo
        fi
    else
        read -rp "$msg " choice

        if [ $with_echo == "true" ]; then
            echo
        fi

        case $choice in  
        y|Y|"") return 0 ;; 
        *) return 1 ;; 
        esac
    fi

}

# >>>>>>>>>>>>>>>>>>>>>>>>>>
# OPERATING SYSTEM SETUP
# >>>>>>>>>>>>>>>>>>>>>>>>>>

function check_requirment(){
    if ! which "$1" &> /dev/null
    then 
        confirm "> [ $1 ] is not installed.  Would you like to install it ? [y/n]" $2
        if [ $? -eq 0 ]; then
            to_install+=($1)
        else
            echo "Without $1 this script will not run "
            exit 1
        fi
    else
        echo "> [ $1 ] is already installed."
    fi
}

####################################################################
# -- Andromeda Installer -------------------------------------------
####################################################################
clear
cat << 'EOF'
    _              _                              _         ___           _        _ _           
   / \   _ __   __| |_ __ ___  _ __ ___   ___  __| | __ _  |_ _|_ __  ___| |_ __ _| | | ___ _ __ 
  / _ \ | '_ \ / _` | '__/ _ \| '_ ` _ \ / _ \/ _` |/ _` |  | || '_ \/ __| __/ _` | | |/ _ \ '__|
 / ___ \| | | | (_| | | | (_) | | | | | |  __/ (_| | (_| |  | || | | \__ \ || (_| | | |  __/ |   
/_/   \_\_| |_|\__,_|_|  \___/|_| |_| |_|\___|\__,_|\__,_| |___|_| |_|___/\__\__,_|_|_|\___|_|   
EOF
line false 100

echo
echo "> OS: [ $ID_LIKE ]" 
echo "> Package manager: [ $PKG_MANAGER ]"
echo "> Install command: [ $INSTALL_CMD ]"
echo

cat << 'EOF'
This script performs the following actions:
-> Installs required packages (gum figlet nix ansible)
-> Installs ansible-galaxy and ansible-galaxy packages
-> Runs ansible playbook
EOF


line false 100
confirm "Run installer? (Y/n)"
if [ $? -ne 0 ]; then
    echo "Exiting..."
    exit 0
fi

cat << 'EOF'
 ____                  _                               _       
|  _ \ ___  __ _ _   _(_)_ __ ___ _ __ ___   ___ _ __ | |_ ___ 
| |_) / _ \/ _` | | | | | '__/ _ \ '_ ` _ \ / _ \ '_ \| __/ __|
|  _ <  __/ (_| | |_| | | | |  __/ | | | | |  __/ | | | |_\__ \
|_| \_\___|\__, |\__,_|_|_|  \___|_| |_| |_|\___|_| |_|\__|___/
              |_|                                               
EOF
line true

to_install=()
check_requirment gum false
check_requirment figlet false
echo

if [ -n "$to_install" ]; then
    $INSTALL_CMD ${to_install[@]}
    line
fi

# ------------------------------------------------------------
# -- Nix Installer -------------------------------------------
# ------------------------------------------------------------

title "Nix Installer"
if ! command -v nix &> /dev/null
then
    tabecho "Nix not found. Installing..."
    curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install
    . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
else
    tabecho "Nix is already installed. Skipping..."
fi
echo

# ----------------------------------------------------------------
# -- Ansible Installer -------------------------------------------
# ----------------------------------------------------------------

title "Ansible Installer"
if ! command -v ansible &> /dev/null
then
    tabecho "Ansible not found. Installing ansible..."
    nix shell nixpkgs#ansible nixpkgs#ansible-lint
else
    tabecho "Ansible is already installed. Skipping..."
fi

# ----------------------------------------------------------------
# -- Ansible Galaxy Installer ------------------------------------
# ----------------------------------------------------------------

title "Ansible Galaxy"
tabecho "Installing ansible-galaxy roles..."
ansible-galaxy install -r requirements.yml &> /dev/null

# ----------------------------------------------------------------
# -- Ansible Playbook Installer ----------------------------------
# ----------------------------------------------------------------

title "Ansible Playbook"

tabecho "Select a playbook to run: "
PLAYBOOK=$(gum choose --item.foreground 250 --header="Select a playbook to run" $(echo "${PLAYBOOKS[@]}"))
echo -e "$PLAYBOOK"
echo

tabecho "Select a tag to run: "
TAG=$(gum choose --item.foreground 250 --header="Select a tag to run" $(echo "${TAGS[@]}"))
echo -e "$TAG"
echo

title "Bootstrapping"
echo "Running ansible playbook '$PLAYBOOK' with tags: '$TAG'"
ansible-playbook -i hosts bootstrap.yml --tags $tags
# ansible-playbook -i hosts bootstrap.yml --ask-become-pass --tags $tags
